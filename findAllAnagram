/*
Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.

Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.

The order of output does not matter.

Example 1:

Input:
s: "cbaebabacd" p: "abc"

Output:
[0, 6]

Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
Example 2:

Input:
s: "abab" p: "ab"

Output:
[0, 1, 2]

Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".

*/

function findAllAnagrams(s, p){
	var result = [];
	var hashp = [];
	for(var j = 0; j < p.length ; p++){
		if(!hashp[p.charAt])
			hashp[p.charAt]=1;
		hashp[p.charAt]++;
	}
	if(s.length && p.length){
		for(var i = 0; i < s.length; i++){
			if(isAnagram(s.split(i,i+p.lenght),hashp.concat()))
			{
				result.push(i);
			}
		}
	}
	return result;
}

functions isAnagram(s, p){
	var result = false;
	for(var i = 0; i < p.length; i++){
		if(!p[s.charAt(i)])
			return result;
		p[s.charAt(i)]--;
		if(p[s.charAt(i)] == 0)
			p.splice(i,1);
	}
	if(p.length)
		result = true;
	return result;
}

console.log(findAllAnagrams("cbaebabacd", "abc" ))
//cba abc
//bae 